{"version":3,"sources":["components/NeighborList/NeighborList.module.css","utils/csvParser.ts","utils/fetchCSV.ts","components/NeighborItem/NeighborItem.tsx","components/NeighborList/NeighborList.tsx","components/SliderContainer/SliderContainer.tsx","components/SliderList/SliderList.tsx","components/Input/Input.tsx","utils/magnitude.ts","utils/checkAngle.ts","utils/cosenus.ts","utils/dotProduct.ts","utils/getKNeighbors.ts","utils/getSystemAggregationTVector.ts","utils/getStandardDeviationFromNeighbor.ts","utils/profilesDefault.ts","components/MainApp/MainApp.tsx","utils/fromDataToSlider.ts","utils/getTransformedData.ts","utils/createPersonFromSliders.ts","utils/getTemporalVector.ts","db/habilidades.csv","components/App/App.tsx","index.tsx","components/App/App.module.css"],"names":["module","exports","csvParser","data","a","transformed","split","map","headers","splice","obj_data","current","forEach","i","index","parsedData","DATA","fetch","catch","response","text","ListItemContainer","styled","ListItem","h3","color","NeighborItem","name","value","secondaryAction","toFixed","divider","ListItemAvatar","Avatar","alt","src","ListItemText","primary","secondary","NeighborList","NeighborArray","className","classes","container","List","dense","sx","width","bgcolor","borderRadius","display","flexDirection","gap","Neighbor","tie","SliderContainer","title","onChange","Slider","valueLabelDisplay","SliderList","sliders","getValue","Container","slider","e","values","id","newData","copy","findIndex","Input","type","TextField","fullWidth","label","variant","test","target","size","getMagnitude","reducedValue","Object","reduce","previousValue","currentValue","Math","pow","sqrt","ridOfHeader","item","cosineSimilarityFunc","dataArray","firstColumnName","currentDotProduct","personProp","keys","filter","elem","dotProduct","magnitudeA","magnitudeB","rowA","rowB","rowAConverted","rowBConverted","rowAMax","max","rowBMax","rowANormalized","rowBNormalized","final","checkAngle","b","abs","fixedSim","dot","getSimilarity","getKNeighbors","person","nameHeader","entries","isCrossover","testArray","dataToCompare","p","push","sort","getSystemAggregationTVector","system","tVector","neighborsVector","newVector","key","standardVector","currentData","objArray","v","acc","val","std","getStandardDeviationFromNeighbor","marketing","design","mix","MainApp","useState","aggregation","setAggregation","inputValue","setInputValue","d","n","join","fromDataToSlider","setSlider","neighbors","setNeighbors","profileHandler","profile","profileArray","prev","Button","onClick","FormControl","InputLabel","Select","labelId","event","MenuItem","rangeValues","proto","createPersonFromSliders","parseInt","transformedData","s","dValue","weightSystem","toString","tempVec","newV","length","vectorTest","element","round","getTemporalVector","includes","aggregationVectorData","aggregationPerson","neighborsFinal","customTheme","createTheme","palette","main","teal","error","deepPurple","App","dataBase","setDataBase","useEffect","fetchCSV","then","convertedData","ThemeProvider","theme","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.47d2c09b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NeighborList_container__20PH6\"};","//Transform the csv data to an array of js objects\nexport const csvParser = async (data: any) => {\n  //1. split de data by break lines and commas in a single movement\n  //-> Expected result: [val1, val2, val3... ]\n  const transformed = data.split(/\\r?\\n/).map((data:any) => data.split(','));\n  //Get the headers\n  const headers = transformed[0];\n  //2. rid of the headers\n  transformed.splice(0, 1);\n  //3. Design the array elem according to the headers\n  const obj_data = transformed.map((data:any) => {\n    const current:any = {};\n    headers.forEach((i:any, index:number) => current[i] = data[index])\n    return current;\n  })\n  // return obj_data;\n  return {parsedData: obj_data, headers: headers};\n};","export async function fetchCSV(DATA:any) {\n  const response:any = await fetch(DATA, {\n      headers: {\n        'content-type': 'text/csv;charset=UTF-8'\n      }\n    })\n    .catch(function () {\n    });\n  const data = await response.text();\n  return data;\n};\n\n","import ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport { styled } from '@mui/system';\n\ninterface NeighborItemProps {\n  name: string;\n  value: number;\n}\n\nconst ListItemContainer = styled(ListItem)({\n  h3:{\n    color: '#A6A6A6'\n  },\n  color: '#122930'\n});\n\nconst NeighborItem: React.FC<NeighborItemProps> = ({name, value}) => {\n\n  return (\n    <ListItemContainer\n      secondaryAction={<h3>{value.toFixed(1)}%</h3>}\n      divider\n    >\n      <ListItemAvatar>\n        <Avatar\n          alt={`Avatar n°`}\n          src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse4.mm.bing.net%2Fth%3Fid%3DOIP.dmrkNiYJX4oH586rKzZebgHaHa%26pid%3DApi&f=1\"\n        />\n      </ListItemAvatar>\n      <ListItemText primary={<h2>{name}</h2>} secondary={<span>Number: 23132423</span>} />\n    </ListItemContainer>\n  );\n}\n\nexport default NeighborItem; ","import List from '@mui/material/List';\nimport { NeighborType } from '../../types/NeighborType';\nimport NeighborItem from '../NeighborItem/NeighborItem';\nimport classes from './NeighborList.module.css'; \nimport {motion} from 'framer-motion'; \n\ninterface NeighborListProps {\n  NeighborArray: NeighborType[]\n}\n\nconst NeighborList: React.FC<NeighborListProps> = ({NeighborArray}) => {\n  return (\n    <div\n      className={classes.container}\n    >\n      <List  dense sx={{ width: '100%', bgcolor: 'transparent', borderRadius :\"8px\", display:\"flex\", flexDirection: \"column\", gap:\"1em\"}}>\n        {NeighborArray.map((Neighbor, index) => {\n          return <NeighborItem key={index} name={Neighbor.name} value={Neighbor.tie}/>\n        })}\n      </List>\n      \n    </div>\n  );\n}\n\nexport default NeighborList; ","import React from 'react'; \nimport { Slider } from '@material-ui/core'; \n\ninterface SliderContainerProps {\n  title: string,\n  value: number | number[],\n  onChange: ((event: React.ChangeEvent<{}>, value: number | number[]) => void) | undefined\n}\n\nconst SliderContainer: React.FC<SliderContainerProps> = ({title, value, onChange}) => {\n  return (\n    <div>\n      <span>{title}</span>\n      <Slider \n        value={value} \n        aria-label=\"Default\" \n        valueLabelDisplay=\"auto\" \n        onChange={onChange}\n        />\n    </div>\n  )\n}\n\nexport default SliderContainer\n","import React from 'react'; \nimport {SliderType} from '../../types/SliderType'; \nimport { Container } from '@material-ui/core';\nimport SliderContainer from '../SliderContainer/SliderContainer'; \n\ninterface SliderListProps {\n  sliders: SliderType;\n  getValue: (value: SliderType) => void\n}\n\nconst SliderList: React.FC<SliderListProps> = ({sliders, getValue}) => {\n\n  const onChange = (id: string, newData: number | number[]) =>{\n    const copy = [...sliders]; \n    const current = copy.findIndex(e => e.id === id); \n    if(current === -1) return\n    copy[current].value = newData; \n    getValue(copy); \n  }\n  return (\n    <Container>\n      {sliders.map( slider => (\n        <SliderContainer \n          key={slider.id}\n          title={slider.title} \n          value={slider.value} \n          onChange={(e, values) => onChange(slider.id, values ) }/>\n      ))}\n    </Container>\n  )\n}\n\nexport default SliderList\n","import { TextField } from '@material-ui/core';\n\ninterface InputProps {\n  type: 'text' | 'number'; \n  getValue: (value: string) => void; \n  value: string;\n  title: string; \n}\n\nconst Input: React.FC<InputProps> = ({type, getValue, value, title}) => {\n  \n  const inputHandler: React.ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement> = (e) => {\n    if(type !== 'number') {\n      getValue(e.target.value)\n      return; \n    }\n    if(/^\\d+$/.test(e.target.value) || e.target.value === '') {\n      getValue(e.target.value);\n    }; \n  } \n  return (\n    <TextField \n      color=\"secondary\"\n      fullWidth\n      id=\"outlined-basic\" \n      label={title} \n      variant=\"outlined\" \n      value={value}\n      onChange={inputHandler}\n      size=\"small\"\n    />\n  )\n}\n\nexport default Input\n","export const getMagnitude = (current:number) => {\n  const total = Object.values(current).splice(1);\n  const reducer = (previousValue:number, currentValue:number) => previousValue + Math.pow(currentValue, 2);\n  const reducedValue:number = total.reduce(reducer, 0);\n  return Math.sqrt(reducedValue);\n}","import {getMagnitude} from './magnitude'; \nconst ridOfHeader = (item: any) => {\n  return Object.values(item).splice(1);\n}\nexport const checkAngle = ([rowA, rowB]: any[]) => {\n  const rowAConverted: any = ridOfHeader(rowA);\n  const rowBConverted: any = ridOfHeader(rowB);\n  const rowAMax = Math.max(...rowAConverted); \n  const rowBMax = Math.max(...rowBConverted); \n  const rowANormalized = rowAConverted.map((item: any) => item / rowAMax); \n  const rowBNormalized = rowBConverted.map((item: any) => item / rowBMax); \n  let final = 0; \n  rowANormalized.forEach((item: any, i: any) => {\n    final =+ (item - rowBNormalized[i]); \n  });   \n  return final === 0? true : false;\n}; \nexport const fixedSim = ([rowA, rowB]: any[]) => {\n  const a = getMagnitude(rowA); \n  const b = getMagnitude(rowB); \n  return a === b ? 1 : (Math.abs(a - b) / Math.max(a, b)); \n}","import {dotProduct} from './dotProduct';\nimport { getMagnitude } from './magnitude';\nimport {checkAngle, fixedSim} from './checkAngle';\n\ninterface getSimilarityInterface {\n  dot: any\n  magnitudeA: any \n  magnitudeB: any\n}\n\nexport const getSimilarity: (data: getSimilarityInterface) => any = ({dot, magnitudeA, magnitudeB}) => {\n  const similarity = dot / (magnitudeA* magnitudeB);\n  return (magnitudeA === 0 || magnitudeB === 0) ? 0 : similarity; \n}\n\nexport const cosineSimilarityFunc = (dataArray: any, firstColumnName: any) => {\n  const currentDotProduct = dotProduct(dataArray, firstColumnName); \n  const magnitudeA = getMagnitude(dataArray[0]);\n  const magnitudeB = getMagnitude(dataArray[1]); \n  if(checkAngle(dataArray)){\n    return fixedSim(dataArray)* 100; \n  }else{\n    return getSimilarity({dot: currentDotProduct,magnitudeA, magnitudeB })* 100; \n  }\n}","export const dotProduct = (data:any, firstColumnName:any) => {\n  let personProp = 0; \n  let elemProps = Object.keys(data[0]).filter(elem => elem !== firstColumnName); \n  elemProps.forEach((elem,i)=>{\n    personProp += data[0][elem] * data[1][elem]\n  })\n  return personProp;\n};","import {cosineSimilarityFunc} from './cosenus'; \n\nexport const getKNeighbors = (parsedData:any, person: any, nameHeader:string[], entries:number, isCrossover = false) => {\n  const testArray:any[] = []; \n  \n  const dataToCompare = parsedData.filter((name:any) => name[nameHeader[0]]!==person[nameHeader[0]]);\n  dataToCompare.forEach((p:any) => {\n    const tie = cosineSimilarityFunc([person,p], nameHeader[0]);\n    const name = isCrossover ? p[nameHeader[1]]: p[nameHeader[0]];\n    testArray.push({tie, name});\n  })\n  return testArray.sort((a,b) => b.tie-a.tie).splice(0,entries)\n}","import { getStandardDeviationFromNeighbor } from \"./getStandardDeviationFromNeighbor\";\n\nexport const getSystemAggregationTVector = (system:string, tVector:any, neighborsVector:any, nameHeader: string) => {\n  const newVector:any = {};\n\n  switch (system) {\n    case 'Naive average':\n      return tVector\n    case 'Least misery':\n      for(const key in tVector){\n        newVector[key] = tVector[key] < 5 ? 0 : tVector[key]\n      }\n      return newVector\n    case 'Maximum pleasure':\n        for(const key in tVector){\n          newVector[key] = tVector[key] >= 8 ? tVector[key]: 0; \n        }\n        return newVector\n    case 'Media satisfaction':\n      const standardVector = getStandardDeviationFromNeighbor(neighborsVector, nameHeader); \n      // console.table(standardVector);\n      for(const key in standardVector){\n        if(standardVector[key] > 1){\n          newVector[key] = 0; \n        }else{\n          newVector[key] = tVector[key]; \n        }\n      }\n      return newVector\n    default: \n      return tVector; \n  }\n}","import {std} from 'mathjs'; \nexport const getStandardDeviationFromNeighbor = (currentData: any, nameHeader: string) => {\n  const newV = currentData.map((v:any) => {\n    const { [nameHeader]: name, ...rest} = v;\n    return rest; \n  })\n\n  const objArray = newV.reduce((acc:any, val:any) => {\n    for(const key in val){\n      if(!acc[key]){\n        acc[key] = []\n      }\n      acc[key].push(val[key])\n    }\n    return acc\n  }, {}); \n  for(const key in objArray){\n    objArray[key] = std(objArray[key])\n  }\n  return objArray; \n}","//Perfil de mercadeo:\nexport const marketing =  [10,9,4,10,7,5,3,8,2,2,8,10,7,4,6,8,8,10,10,10,10,9,8,0,7,4,0,0,0,0,0,6,0];\n\n//Perfil de diseño:\nexport const design = [9,10,9,5,5,5,2,7,3,3,9,8,10,7,10,9,9,10,0,0,0,5,0,0,4,4,10,10,10,10,10,5,9]; \n\n//Perfil mixto:\nexport const mix = [10,7,8,10,4,10,3,10,5,7,4,4,5,8,3,10,5,8,0,4,5,3,10,1,10,7,0,0,0,0,0,10,0]; \n","import { Fragment, useState } from 'react';\nimport { SliderType } from '../../types/SliderType';\nimport { NeighborType } from '../../types/NeighborType';\n\nimport {fromDataToSlider} from '../../utils/fromDataToSlider'; \nimport NeighborList from '../NeighborList/NeighborList';\nimport SliderList from '../SliderList/SliderList'; \nimport Input from '../Input/Input'; \nimport logo from '../../lib/svg/logo.svg'\n\nimport { Button, FormControl, InputLabel, MenuItem, Select } from  '@material-ui/core';\n\nimport { createPersonFromSliders } from '../../utils/createPersonFromSliders'; \nimport { getKNeighbors } from '../../utils/getKNeighbors'; \nimport {getSystemAggregationTVector} from '../../utils/getSystemAggregationTVector';\nimport { getTemporalVector } from '../../utils/getTemporalVector';\nimport { getTransformedData } from '../../utils/getTransformedData';\nimport {marketing, design, mix} from '../../utils/profilesDefault'; \n\ninterface MainAppProps {\n  data: any\n  headers: string[]\n};\ntype SelectHandlerType = ((event: React.ChangeEvent<{name?: string | undefined;value: unknown;}>, child: React.ReactNode) => void);\n\nconst MainApp: React.FC<MainAppProps> = ({data, headers}) => {\n  const [aggregation, setAggregation] = useState<string>('');\n  const [inputValue, setInputValue] = useState('');\n  const [sliders, setSlider] = useState<SliderType>(fromDataToSlider(headers, headers[0]));\n  const [neighbors, setNeighbors] = useState<NeighborType[]>();\n\n  const getValueSlider = (value: SliderType) => setSlider(value);\n  const getValue = (value: string) => setInputValue(value);\n  \n\n\n  const submitHandler = () => {\n    if(!inputValue) return; \n    const proto = createPersonFromSliders(sliders, headers[0]);\n    const neighbors = getKNeighbors(data, proto, [headers[0]], parseInt(inputValue));\n    const transformedData = getTransformedData(data, sliders.map(s => {\n      if(typeof s.value === 'number'){\n        return s.value/100\n      }\n      return 0\n    }),headers[0]);    \n\n    //Enhance the variable names, and the setup as well\n    const neighborsVector = transformedData.filter((n:any) => {\n      return neighbors.map( a => a.name).includes(n[headers[0]]);\n    });\n    const tempVec = getTemporalVector(neighborsVector,headers[0]);\n    const aggregationVectorData = getSystemAggregationTVector(aggregation,tempVec,transformedData, headers[0]);\n    const aggregationPerson= {[headers[0]]: 'Aggregation person', ...aggregationVectorData}; \n    const neighborsFinal = getKNeighbors(data, aggregationPerson, [headers[0]], parseInt(inputValue));\n    setNeighbors(neighborsFinal);\n\n  }\n\n  const selectHandler:SelectHandlerType = (event) => {\n    if(typeof event.target.value === 'string' ){\n      setAggregation(event.target.value);\n    }\n  }\n\n  const profileHandler = (profile: 'marketing' | 'design' | 'mix') => {\n    let profileArray:number[] = []; \n    switch(profile){\n      case 'marketing': profileArray = marketing\n      break;\n      case 'design': profileArray = design\n      break;\n      case 'mix': profileArray = mix\n      break;\n    }\n    setSlider(prev => prev.map((slider, index) => ({...slider, value: profileArray[index]*10})))\n  }\n\n  return (\n    <Fragment>\n      {/* <img src={logo} alt=\"logo\"/> */}\n      <Input \n        type=\"number\" \n        getValue={getValue} \n        value={inputValue}\n        title=\"Número de personas\"\n      />\n      <Button \n        variant=\"outlined\"\n        type=\"button\"\n        color=\"primary\"\n        onClick={() => profileHandler('marketing')}\n      >\n        Marketing\n      </Button>\n      <Button \n        variant=\"outlined\"\n        type=\"button\"\n        color=\"primary\"\n        onClick={() => profileHandler('design')}\n      >\n        Design\n      </Button>\n      <Button \n        variant=\"outlined\"\n        type=\"button\"\n        color=\"primary\"\n        onClick={() => profileHandler('mix')}\n      >\n        Mix\n      </Button>\n      <SliderList sliders={sliders} getValue={getValueSlider} />\n      <FormControl fullWidth>\n        <InputLabel id=\"demo-simple-select-label\">Aggregation model</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          value={aggregation}\n          label=\"Age\"\n          onChange={selectHandler}\n        >\n          <MenuItem value={'Naive average'}>Naive average</MenuItem>\n          <MenuItem value={'Least misery'}>Least misery</MenuItem>\n          <MenuItem value={'Maximum pleasure'}>Maximum pleasure</MenuItem>\n          <MenuItem value={'Media satisfaction'}>Media satisfaction</MenuItem>\n        </Select>\n      </FormControl>\n      <Button \n        variant=\"outlined\"\n        type=\"button\"\n        color=\"secondary\"\n        onClick={submitHandler}\n      >\n        Continuar\n      </Button>\n      {neighbors && <NeighborList NeighborArray={neighbors}/>}\n    </Fragment>\n  )\n}\n\nexport default MainApp\n","export const fromDataToSlider = (data:string[], nameHeader:string) => {\n  return data.filter(d => d !== nameHeader ).map( n => ({\n    id: n.split(' ').join(''),\n    value: 100, \n    title: n\n  }))\n}","export const getTransformedData = (currentData:any, rangeValues:any, nameHeader:  any) => {\n  return currentData.map( (dValue:any) => {\n    const  weightSystem:any = {};\n    let index = 0;\n    for (const key in dValue){\n      if(key !== nameHeader){\n        weightSystem[key] = (parseInt(dValue[key])*rangeValues[index]).toString();\n        index ++;\n      }else{\n        weightSystem[key] = dValue[key];\n      }\n    }\n    return weightSystem\n  })\n}","import { SliderType } from \"../types/SliderType\";\n\nexport const createPersonFromSliders = (sliders:SliderType, nameHeader: string) => {\n  const person:any = {}\n  \n  sliders.forEach( n => {\n    if( typeof n.value === 'number'){\n      person[n.title] = (n.value / 10)\n    }\n  })\n  return {[nameHeader]: 'proto', ...person}; \n}","export const getTemporalVector = (transformedData: any, nameHeader: any) => {\n  const newV = transformedData.map((v:any) => {\n    const { [nameHeader]: name, ...rest} = v;\n    return rest; \n  })\n  const { length } = newV;\n  const vectorTest:any = {}; \n  newV.forEach((element:any, index:number) => {\n    if(index !== 0) return \n    for (const key in element){\n      vectorTest[key] = newV.reduce((acc:number, val:any) => {\n        return acc + (val[key]/length);\n      }, 0);\n    }\n  });\n  for(const key in vectorTest){\n    vectorTest[key] = Math.round(vectorTest[key])\n  }\n  return vectorTest;\n}","export default __webpack_public_path__ + \"static/media/habilidades.079e96e9.csv\";","import React, { useState, useEffect } from 'react';\nimport { csvParser } from '../../utils/csvParser'; \nimport { fetchCSV } from '../../utils/fetchCSV'; \nimport classes from './App.module.css';\nimport MainApp from '../MainApp/MainApp';\nimport { ThemeProvider, createTheme} from '@material-ui/core';\nimport { teal, deepPurple } from '@mui/material/colors';\n//@ts-ignore\n// import DATA from '../../db/data.csv';\nimport DATA from '../../db/habilidades.csv';\n\nconst customTheme = createTheme({\n  palette:{\n    primary: {\n      main: teal[500]\n    }, \n    secondary: {\n      main: '#122930'\n    },\n    error: {\n      main: deepPurple[50]\n    }\n\n  }\n})\n\nfunction App() {\n  const [dataBase, setDataBase] = useState<any>(null); \n\n  useEffect(() => {\n    fetchCSV(DATA)\n    .then( value => csvParser(value))\n    .then(convertedData => {\n      setDataBase(convertedData);\n    });\n  }, []);\n\n\n  return (\n    <ThemeProvider theme={customTheme}>\n      <div className={classes['app']}>\n        {dataBase && <MainApp headers={dataBase.headers} data={dataBase.parsedData}/>}\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1IksY\"};"],"sourceRoot":""}