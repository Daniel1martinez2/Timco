{"version":3,"sources":["components/App/App.module.css","components/ModalNeighbor/ModalNeighbor.module.css","components/NeighborList/NeighborList.module.css","utils/csvParser.ts","utils/fetchCSV.ts","components/ModalScreen/ModalScreen.tsx","components/ChartTest/ChartTest.tsx","components/ModalNeighbor/ModalNeighbor.tsx","components/NeighborItem/NeighborItem.tsx","components/NeighborList/NeighborList.tsx","components/SliderContainer/SliderContainer.tsx","components/SliderList/SliderList.tsx","components/Input/Input.tsx","utils/magnitude.ts","utils/checkAngle.ts","utils/cosenus.ts","utils/dotProduct.ts","utils/getKNeighbors.ts","utils/getSystemAggregationTVector.ts","utils/getStandardDeviationFromNeighbor.ts","utils/profilesDefault.ts","components/MainApp/MainApp.tsx","utils/fromDataToSlider.ts","utils/getTransformedData.ts","utils/createPersonFromSliders.ts","utils/getTemporalVector.ts","db/habilidades.csv","components/App/App.tsx","index.tsx","components/ModalScreen/ModalScreen.module.css"],"names":["module","exports","csvParser","data","a","transformed","split","map","headers","splice","obj_data","current","forEach","i","index","parsedData","DATA","fetch","catch","response","text","ModalScreen","setShowModal","children","modalRoot","document","getElementById","backdrop","ReactDOM","createPortal","onClick","className","styles","Chart","register","registerables","ChartTest","labels","datasets","backgroundColor","borderWidth","height","width","options","indexAxis","responsive","color","plugins","legend","display","scales","xAxes","ticks","font","family","grid","yAxes","ModalNeighbor","name","keys","Object","slice","info","e","tdInfo","key","push","parseInt","getTd","classes","container","ListItemContainer","styled","ListItem","h3","NeighborItem","value","useState","showModal","secondaryAction","toFixed","disablePadding","ListItemButton","ListItemAvatar","Avatar","alt","src","ListItemText","primary","secondary","getNeighborData","neighborName","header","find","d","NeighborList","NeighborArray","List","dense","sx","bgcolor","borderRadius","flexDirection","gap","neighbor","tie","SliderContainer","title","onChange","Slider","valueLabelDisplay","SliderList","sliders","getValue","Container","slider","values","id","newData","copy","findIndex","Input","type","TextField","fullWidth","label","variant","test","target","size","getMagnitude","reducedValue","reduce","previousValue","currentValue","Math","pow","sqrt","ridOfHeader","item","cosineSimilarityFunc","dataArray","firstColumnName","currentDotProduct","personProp","filter","elem","dotProduct","magnitudeA","magnitudeB","rowA","rowB","rowAConverted","rowBConverted","rowAMax","max","rowBMax","rowANormalized","rowBNormalized","final","checkAngle","b","abs","fixedSim","dot","getSimilarity","getKNeighbors","person","nameHeader","entries","isCrossover","testArray","dataToCompare","p","sort","getSystemAggregationTVector","system","tVector","neighborsVector","newVector","console","log","standardVector","currentData","objArray","v","acc","val","std","getStandardDeviationFromNeighbor","marketing","design","mix","MainApp","aggregation","setAggregation","inputValue","setInputValue","neighborListCompleteData","setNeighborListCompleteData","n","join","fromDataToSlider","setSlider","neighbors","setNeighbors","profileHandler","profile","profileArray","prev","Button","FormControl","InputLabel","Select","labelId","event","MenuItem","rangeValues","proto","createPersonFromSliders","transformedData","s","dValue","weightSystem","toString","tempVec","newV","length","vectorTest","element","round","getTemporalVector","includes","aggregationVectorData","aggregationPerson","neighborsFinal","currentNeighbors","neighborsListNames","getCompleteDataOfNeighborList","customTheme","createTheme","palette","main","teal","error","deepPurple","App","dataBase","setDataBase","useEffect","fetchCSV","then","convertedData","ThemeProvider","theme","render"],"mappings":"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","file":"static/js/main.313711c9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1IksY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ModalNeighbor_container__iwMv1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NeighborList_container__20PH6\"};","//Transform the csv data to an array of js objects\nexport const csvParser = async (data: any) => {\n  //1. split de data by break lines and commas in a single movement\n  //-> Expected result: [val1, val2, val3... ]\n  const transformed = data.split(/\\r?\\n/).map((data:any) => data.split(','));\n  //Get the headers\n  const headers = transformed[0];\n  //2. rid of the headers\n  transformed.splice(0, 1);\n  //3. Design the array elem according to the headers\n  const obj_data = transformed.map((data:any) => {\n    const current:any = {};\n    headers.forEach((i:any, index:number) => current[i] = data[index])\n    return current;\n  })\n  // return obj_data;\n  return {parsedData: obj_data, headers: headers};\n};","export async function fetchCSV(DATA:any) {\n  const response:any = await fetch(DATA, {\n      headers: {\n        'content-type': 'text/csv;charset=UTF-8'\n      }\n    })\n    .catch(function () {\n    });\n  const data = await response.text();\n  return data;\n};\n\n","import React, {Fragment} from 'react'; \nimport ReactDOM from 'react-dom';\nimport styles from './ModalScreen.module.css';\n\ninterface ModalScreenInterface{\n  setShowModal:any ;\n  children: React.ReactNode;\n}; \n\n// ACTUAL COMPONENT\nconst ModalScreen:React.FC<ModalScreenInterface>= ({setShowModal, children}) => {\n  const modalRoot = document.getElementById(\"modal-root\") as HTMLElement;\n  const backdrop = document.getElementById(\"backdrop-root\") as HTMLElement;\n  return (\n    <Fragment>\n      {ReactDOM.createPortal(\n        <div \n          onClick={() => setShowModal(false)} \n          className={styles['modal-wrapper']}\n        >\n        </div>\n        , backdrop)}\n      {ReactDOM.createPortal(<div className={styles['container']}>{children}</div>, modalRoot)}\n    </Fragment>\n  )\n}\n\nexport default ModalScreen\n","import React from 'react'; \nimport {Bar} from 'react-chartjs-2'; \nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\n\nconst ChartTest = ({labels, data}: {labels: string[], data: number[]}) => {\n  return (\n    <Bar\n        data={{\n          labels: labels,\n          datasets: [{\n              data: data,\n              backgroundColor: '#009688',\n              \n              borderWidth: 1\n          }]\n        }}\n        height={400}\n        width={600}\n        options={{\n          indexAxis: 'y',\n          responsive: true,\n          color: 'white',\n          plugins:{\n            legend: { display: false, }\n          },\n          scales: {\n            xAxes:{\n              ticks:{\n                color: '#7F828F',\n                font: {\n                  family: 'lato'\n                }\n              },\n              grid:{\n                color: '#434450'\n              },\n            },\n            yAxes:{\n              grid:{\n                color: '#434450',\n              },\n              ticks:{\n                color: '#7F828F',\n                font: {\n                  family: 'lato'\n                }\n              },\n            },\n              \n          }\n          \n        }}\n      />\n  )\n}\n\nexport default ChartTest\n","import React from 'react';\nimport ChartTest from '../ChartTest/ChartTest';\nimport classes from './ModalNeighbor.module.css';\n\ninterface ModalNeighborProps {\n  name: string;\n  data: any;\n}\n\n  const getTd = (e:any) => {\n    const tdInfo = [];\n    for (let key in e) {\n      tdInfo.push(parseInt(e[key])); \n    }; \n    return tdInfo;\n  } \n\n\n  \nconst ModalNeighbor: React.FC<ModalNeighborProps> = ({name, data}) => {\n  \n\n  const keys = Object.keys(data).slice(1);\n  const info = getTd(data).slice(1);\n\n  return (\n    <div className={classes.container}>\n      <h1>{name}</h1>\n      {/* {keys.map( (key, index) => (\n        <li key={index} style={{display: 'flex', alignItems: 'center', gap: '1em'}}>\n          <h3>{key}:</h3> <span>{info[index]}</span>\n        </li>\n      ))} */}\n      <ChartTest labels={keys} data={info}/>      \n    </div>\n  )\n}\n\nexport default ModalNeighbor\n\n\n\n","import React, {Fragment, useState} from 'react'; \nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport { styled } from '@mui/system';\nimport ModalScreen from '../ModalScreen/ModalScreen';\nimport ModalNeighbor from '../ModalNeighbor/ModalNeighbor';\n\ninterface NeighborItemProps {\n  name: string;\n  value: number;\n  data: any\n}\n\nconst ListItemContainer = styled(ListItem)({\n  h3:{\n    color: '#A6A6A6'\n  },\n  color: '#122930'\n});\n\nconst NeighborItem: React.FC<NeighborItemProps> = ({name, value, data}) => {\n  const [showModal, setShowModal] = useState(false); \n  return (\n    <Fragment>\n      {showModal && <ModalScreen setShowModal={setShowModal}>\n        <ModalNeighbor data={data} name={name}/>\n      </ModalScreen>}\n      \n      <ListItemContainer\n        secondaryAction={<h3>{value.toFixed(1)}%</h3>}\n        // divider\n        disablePadding\n      >\n        <ListItemButton onClick={() => setShowModal(true)}>\n          <ListItemAvatar>\n            <Avatar\n              alt={`Avatar n°`}\n              src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse4.mm.bing.net%2Fth%3Fid%3DOIP.dmrkNiYJX4oH586rKzZebgHaHa%26pid%3DApi&f=1\"\n            />\n          </ListItemAvatar>\n          <ListItemText primary={<h2>{name}</h2>} secondary={<span>Number: 23132423</span>} />\n        </ListItemButton>\n      </ListItemContainer>\n    </Fragment>\n  );\n}\n\nexport default NeighborItem; \n\n/**\n * \n * <ListItem\n    key={value}\n    secondaryAction={\n      <h1>s</h1>\n    }\n    disablePadding\n  >\n    <ListItemButton>\n      <ListItemAvatar>\n        <Avatar\n          alt={`Avatar n°${value + 1}`}\n          src={`/static/images/avatar/${value + 1}.jpg`}\n        />\n      </ListItemAvatar>\n      <ListItemText id={'s'} primary={`Line item ${value + 1}`} />\n    </ListItemButton>\n  </ListItem>\n */","import List from '@mui/material/List';\nimport { NeighborType } from '../../types/NeighborType';\nimport NeighborItem from '../NeighborItem/NeighborItem';\nimport classes from './NeighborList.module.css'; \n\ninterface NeighborListProps {\n  NeighborArray: NeighborType[]\n  data: any\n  header: string\n}\n\nconst getNeighborData = (data: any, neighborName: string, header: string) =>{\n\n  return data.find((d:any) => d[header] === neighborName); \n}\n\nconst NeighborList: React.FC<NeighborListProps> = ({NeighborArray, data, header}) => {\n  \n  return (\n    <div\n      className={classes.container}\n    >\n      <List  dense sx={{ width: '100%', bgcolor: 'transparent', borderRadius :\"8px\", display:\"flex\", flexDirection: \"column\", gap:\"1em\"}}>\n        {NeighborArray.map((neighbor, index) => {\n          return <NeighborItem data={getNeighborData(data, neighbor.name, header)} key={index} name={neighbor.name} value={neighbor.tie}/>\n        })}\n      </List>\n    </div>\n  );\n}\n\nexport default NeighborList; ","import React from 'react'; \nimport { Slider } from '@material-ui/core'; \n\ninterface SliderContainerProps {\n  title: string,\n  value: number | number[],\n  onChange: ((event: React.ChangeEvent<{}>, value: number | number[]) => void) | undefined\n}\n\nconst SliderContainer: React.FC<SliderContainerProps> = ({title, value, onChange}) => {\n  return (\n    <div>\n      <span>{title}</span>\n      <Slider \n        value={value} \n        aria-label=\"Default\" \n        valueLabelDisplay=\"auto\" \n        onChange={onChange}\n        />\n    </div>\n  )\n}\n\nexport default SliderContainer\n","import React from 'react'; \nimport {SliderType} from '../../types/SliderType'; \nimport { Container } from '@material-ui/core';\nimport SliderContainer from '../SliderContainer/SliderContainer'; \n\ninterface SliderListProps {\n  sliders: SliderType;\n  getValue: (value: SliderType) => void\n}\n\nconst SliderList: React.FC<SliderListProps> = ({sliders, getValue}) => {\n\n  const onChange = (id: string, newData: number | number[]) =>{\n    const copy = [...sliders]; \n    const current = copy.findIndex(e => e.id === id); \n    if(current === -1) return\n    copy[current].value = newData; \n    getValue(copy); \n  }\n  return (\n    <Container>\n      {sliders.map( slider => (\n        <SliderContainer \n          key={slider.id}\n          title={slider.title} \n          value={slider.value} \n          onChange={(e, values) => onChange(slider.id, values ) }/>\n      ))}\n    </Container>\n  )\n}\n\nexport default SliderList\n","import { TextField } from '@material-ui/core';\n\ninterface InputProps {\n  type: 'text' | 'number'; \n  getValue: (value: string) => void; \n  value: string;\n  title: string; \n}\n\nconst Input: React.FC<InputProps> = ({type, getValue, value, title}) => {\n  \n  const inputHandler: React.ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement> = (e) => {\n    if(type !== 'number') {\n      getValue(e.target.value)\n      return; \n    }\n    if(/^\\d+$/.test(e.target.value) || e.target.value === '') {\n      getValue(e.target.value);\n    }; \n  } \n  return (\n    <TextField \n      color=\"secondary\"\n      fullWidth\n      id=\"outlined-basic\" \n      label={title} \n      variant=\"outlined\" \n      value={value}\n      onChange={inputHandler}\n      size=\"small\"\n    />\n  )\n}\n\nexport default Input\n","export const getMagnitude = (current:number) => {\n  const total = Object.values(current).splice(1);\n  const reducer = (previousValue:number, currentValue:number) => previousValue + Math.pow(currentValue, 2);\n  const reducedValue:number = total.reduce(reducer, 0);\n  return Math.sqrt(reducedValue);\n}","import {getMagnitude} from './magnitude'; \nconst ridOfHeader = (item: any) => {\n  return Object.values(item).splice(1);\n}\nexport const checkAngle = ([rowA, rowB]: any[]) => {\n  const rowAConverted: any = ridOfHeader(rowA);\n  const rowBConverted: any = ridOfHeader(rowB);\n  const rowAMax = Math.max(...rowAConverted); \n  const rowBMax = Math.max(...rowBConverted); \n  const rowANormalized = rowAConverted.map((item: any) => item / rowAMax); \n  const rowBNormalized = rowBConverted.map((item: any) => item / rowBMax); \n  let final = 0; \n  rowANormalized.forEach((item: any, i: any) => {\n    final =+ (item - rowBNormalized[i]); \n  });   \n  return final === 0? true : false;\n}; \nexport const fixedSim = ([rowA, rowB]: any[]) => {\n  const a = getMagnitude(rowA); \n  const b = getMagnitude(rowB); \n  return a === b ? 1 : (Math.abs(a - b) / Math.max(a, b)); \n}","import {dotProduct} from './dotProduct';\nimport { getMagnitude } from './magnitude';\nimport {checkAngle, fixedSim} from './checkAngle';\n\ninterface getSimilarityInterface {\n  dot: any\n  magnitudeA: any \n  magnitudeB: any\n}\n\nexport const getSimilarity: (data: getSimilarityInterface) => any = ({dot, magnitudeA, magnitudeB}) => {\n  const similarity = dot / (magnitudeA* magnitudeB);\n  return (magnitudeA === 0 || magnitudeB === 0) ? 0 : similarity; \n}\n\nexport const cosineSimilarityFunc = (dataArray: any, firstColumnName: any) => {\n  const currentDotProduct = dotProduct(dataArray, firstColumnName); \n  const magnitudeA = getMagnitude(dataArray[0]);\n  const magnitudeB = getMagnitude(dataArray[1]); \n  if(checkAngle(dataArray)){\n    return fixedSim(dataArray)* 100; \n  }else{\n    return getSimilarity({dot: currentDotProduct,magnitudeA, magnitudeB })* 100; \n  }\n}","export const dotProduct = (data:any, firstColumnName:any) => {\n  let personProp = 0; \n  let elemProps = Object.keys(data[0]).filter(elem => elem !== firstColumnName); \n  elemProps.forEach((elem,i)=>{\n    personProp += data[0][elem] * data[1][elem]\n  })\n  return personProp;\n};","import {cosineSimilarityFunc} from './cosenus'; \n\nexport const getKNeighbors = (parsedData:any, person: any, nameHeader:string[], entries:number, isCrossover = false) => {\n  const testArray:any[] = []; \n  \n  const dataToCompare = parsedData.filter((name:any) => name[nameHeader[0]]!==person[nameHeader[0]]);\n  dataToCompare.forEach((p:any) => {\n    const tie = cosineSimilarityFunc([person,p], nameHeader[0]);\n    const name = isCrossover ? p[nameHeader[1]]: p[nameHeader[0]];\n    testArray.push({tie, name});\n  })\n  return testArray.sort((a,b) => b.tie-a.tie).splice(0,entries)\n}","import { getStandardDeviationFromNeighbor } from \"./getStandardDeviationFromNeighbor\";\n\nexport const getSystemAggregationTVector = (system:string, tVector:any, neighborsVector:any, nameHeader: string) => {\n  const newVector:any = {};\n\n  switch (system) {\n    case 'Naive average':\n      return tVector\n    case 'Least misery':\n      for(const key in tVector){\n        newVector[key] = tVector[key] < 5 ? 0 : tVector[key]\n      }\n      return newVector\n    case 'Maximum pleasure':\n        for(const key in tVector){\n          newVector[key] = tVector[key] >= 8 ? tVector[key]: 0; \n        }\n        return newVector\n    case 'Media satisfaction':\n      console.log(neighborsVector, 'LOL');\n      const standardVector = getStandardDeviationFromNeighbor(neighborsVector, nameHeader); \n      // console.table(standardVector);\n      for(const key in standardVector){\n        if(standardVector[key] > 1){\n          newVector[key] = 0; \n        }else{\n          newVector[key] = tVector[key]; \n        }\n      }\n      return newVector\n    default: \n      return tVector; \n  }\n}","import {std} from 'mathjs'; \nexport const getStandardDeviationFromNeighbor = (currentData: any, nameHeader: string) => {\n  const newV = currentData.map((v:any) => {\n    const { [nameHeader]: name, ...rest} = v;\n    return rest; \n  })\n\n  const objArray = newV.reduce((acc:any, val:any) => {\n    for(const key in val){\n      if(!acc[key]){\n        acc[key] = []\n      }\n      acc[key].push(parseInt(val[key]))\n    }\n    return acc\n  }, {}); \n  for(const key in objArray){\n    objArray[key] = std(objArray[key])\n  }\n  return objArray; \n}","//Perfil de mercadeo:\nexport const marketing =  [10,9,4,10,7,5,3,8,2,2,8,10,7,4,6,8,8,10,10,10,10,9,8,0,7,4,0,0,0,0,0,6,0];\n\n//Perfil de diseño:\nexport const design = [9,10,9,5,5,5,2,7,3,3,9,8,10,7,10,9,9,10,0,0,0,5,0,0,4,4,10,10,10,10,10,5,9]; \n\n//Perfil mixto:\nexport const mix = [10,7,8,10,4,10,3,10,5,7,4,4,5,8,3,10,5,8,0,4,5,3,10,1,10,7,0,0,0,0,0,10,0]; \n","import { Fragment, useState } from 'react';\nimport { SliderType } from '../../types/SliderType';\nimport { NeighborType } from '../../types/NeighborType';\n\nimport {fromDataToSlider} from '../../utils/fromDataToSlider'; \nimport NeighborList from '../NeighborList/NeighborList';\nimport SliderList from '../SliderList/SliderList'; \nimport Input from '../Input/Input'; \nimport logo from '../../lib/svg/logo.svg'\n\nimport { Button, FormControl, InputLabel, MenuItem, Select } from  '@material-ui/core';\n\nimport { createPersonFromSliders } from '../../utils/createPersonFromSliders'; \nimport { getKNeighbors } from '../../utils/getKNeighbors'; \nimport {getSystemAggregationTVector} from '../../utils/getSystemAggregationTVector';\nimport { getTemporalVector } from '../../utils/getTemporalVector';\nimport { getTransformedData } from '../../utils/getTransformedData';\nimport {marketing, design, mix} from '../../utils/profilesDefault'; \n\nconst getCompleteDataOfNeighborList = (data:any, currentNeighbors:NeighborType[], header:string) => {\n  const neighborsListNames = currentNeighbors.map(n => n.name); \n  return data.filter((d:any) => neighborsListNames.includes(d[header]))\n}\n\ninterface MainAppProps {\n  data: any\n  headers: string[]\n};\n\ntype SelectHandlerType = ((event: React.ChangeEvent<{name?: string | undefined;value: unknown;}>, child: React.ReactNode) => void);\n\nconst MainApp: React.FC<MainAppProps> = ({data, headers}) => {\n  \n  const [aggregation, setAggregation] = useState<string>('');\n  const [inputValue, setInputValue] = useState('');\n  const [neighborListCompleteData, setNeighborListCompleteData] = useState([]);\n  const [sliders, setSlider] = useState<SliderType>(fromDataToSlider(headers, headers[0]));\n  const [neighbors, setNeighbors] = useState<NeighborType[]>();\n\n  const getValueSlider = (value: SliderType) => setSlider(value);\n  const getValue = (value: string) => setInputValue(value);\n  \n \n\n  const submitHandler = () => {\n    if(!inputValue) return; \n    const proto = createPersonFromSliders(sliders, headers[0]);\n    const neighbors = getKNeighbors(data, proto, [headers[0]], parseInt(inputValue));\n    const transformedData = getTransformedData(data, sliders.map(s => {\n      if(typeof s.value === 'number'){\n        return s.value/100\n      }\n      return 0\n    }),headers[0]);    \n\n    //Enhance the variable names, and the setup as well\n    const neighborsVector = transformedData.filter((n:any) => {\n      return neighbors.map( a => a.name).includes(n[headers[0]]);\n    });\n    const tempVec = getTemporalVector(neighborsVector,headers[0]);\n    const aggregationVectorData = getSystemAggregationTVector(aggregation,tempVec,transformedData, headers[0]);\n    const aggregationPerson= {[headers[0]]: 'Aggregation person', ...aggregationVectorData}; \n    const neighborsFinal = getKNeighbors(data, aggregationPerson, [headers[0]], parseInt(inputValue));\n    setNeighbors(neighborsFinal);\n\n    // console.log(neighborsFinal);\n\n    // const neighborsListNames = neighborsFinal.map(n => n.name); \n    \n    // console.log(data.filter((d:any) => neighborsListNames.includes(d[headers[0]])));\n    setNeighborListCompleteData(getCompleteDataOfNeighborList(data,neighborsFinal, headers[0]))\n  }\n\n  const selectHandler:SelectHandlerType = (event) => {\n    if(typeof event.target.value === 'string' ){\n      setAggregation(event.target.value);\n    }\n  }\n\n  const profileHandler = (profile: 'marketing' | 'design' | 'mix') => {\n    let profileArray:number[] = []; \n    switch(profile){\n      case 'marketing': profileArray = marketing\n      break;\n      case 'design': profileArray = design\n      break;\n      case 'mix': profileArray = mix\n      break;\n    }\n    setSlider(prev => prev.map((slider, index) => ({...slider, value: profileArray[index]*10})))\n  }\n\n  return (\n    <Fragment>\n      \n      {/* <img src={logo} alt=\"logo\"/> */}\n      <Input \n        type=\"number\" \n        getValue={getValue} \n        value={inputValue}\n        title=\"Número de personas\"\n      />\n      <Button \n        variant=\"outlined\"\n        type=\"button\"\n        color=\"primary\"\n        onClick={() => profileHandler('marketing')}\n      >\n        Marketing\n      </Button>\n      <Button \n        variant=\"outlined\"\n        type=\"button\"\n        color=\"primary\"\n        onClick={() => profileHandler('design')}\n      >\n        Design\n      </Button>\n      <Button \n        variant=\"outlined\"\n        type=\"button\"\n        color=\"primary\"\n        onClick={() => profileHandler('mix')}\n      >\n        Mix\n      </Button>\n      <SliderList sliders={sliders} getValue={getValueSlider} />\n      <FormControl fullWidth>\n        <InputLabel id=\"demo-simple-select-label\">Aggregation model</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          value={aggregation}\n          label=\"Age\"\n          onChange={selectHandler}\n        >\n          <MenuItem value={'Naive average'}>Naive average</MenuItem>\n          <MenuItem value={'Least misery'}>Least misery</MenuItem>\n          <MenuItem value={'Maximum pleasure'}>Maximum pleasure</MenuItem>\n          <MenuItem value={'Media satisfaction'}>Media satisfaction</MenuItem>\n        </Select>\n      </FormControl>\n      <Button \n        variant=\"outlined\"\n        type=\"button\"\n        color=\"secondary\"\n        onClick={submitHandler}\n      >\n        Continuar\n      </Button>\n      {neighbors && <NeighborList header={headers[0]} data={neighborListCompleteData} NeighborArray={neighbors}/>}\n    </Fragment>\n  )\n}\n\nexport default MainApp\n","export const fromDataToSlider = (data:string[], nameHeader:string) => {\n  return data.filter(d => d !== nameHeader ).map( n => ({\n    id: n.split(' ').join(''),\n    value: 100, \n    title: n\n  }))\n}","export const getTransformedData = (currentData:any, rangeValues:any, nameHeader:  any) => {\n  return currentData.map( (dValue:any) => {\n    const  weightSystem:any = {};\n    let index = 0;\n    for (const key in dValue){\n      if(key !== nameHeader){\n        weightSystem[key] = (parseInt(dValue[key])*rangeValues[index]).toString();\n        index ++;\n      }else{\n        weightSystem[key] = dValue[key];\n      }\n    }\n    return weightSystem\n  })\n}","import { SliderType } from \"../types/SliderType\";\n\nexport const createPersonFromSliders = (sliders:SliderType, nameHeader: string) => {\n  const person:any = {}\n  \n  sliders.forEach( n => {\n    if( typeof n.value === 'number'){\n      person[n.title] = (n.value / 10)\n    }\n  })\n  return {[nameHeader]: 'proto', ...person}; \n}","export const getTemporalVector = (transformedData: any, nameHeader: any) => {\n  const newV = transformedData.map((v:any) => {\n    const { [nameHeader]: name, ...rest} = v;\n    return rest; \n  })\n  const { length } = newV;\n  const vectorTest:any = {}; \n  newV.forEach((element:any, index:number) => {\n    if(index !== 0) return \n    for (const key in element){\n      vectorTest[key] = newV.reduce((acc:number, val:any) => {\n        return acc + (val[key]/length);\n      }, 0);\n    }\n  });\n  for(const key in vectorTest){\n    vectorTest[key] = Math.round(vectorTest[key])\n  }\n  return vectorTest;\n}","export default __webpack_public_path__ + \"static/media/habilidades.079e96e9.csv\";","import React, { useState, useEffect } from 'react';\nimport { csvParser } from '../../utils/csvParser'; \nimport { fetchCSV } from '../../utils/fetchCSV'; \nimport classes from './App.module.css';\nimport MainApp from '../MainApp/MainApp';\nimport { ThemeProvider, createTheme} from '@material-ui/core';\nimport { teal, deepPurple } from '@mui/material/colors';\n//@ts-ignore\n// import DATA from '../../db/data.csv';\nimport DATA from '../../db/habilidades.csv';\n\n\nconst customTheme = createTheme({\n  palette:{\n    primary: {\n      main: teal[500]\n    }, \n    secondary: {\n      main: '#122930'\n    },\n    error: {\n      main: deepPurple[50]\n    }\n\n  }\n})\n\n\n\nfunction App() {\n  \n  const [dataBase, setDataBase] = useState<any>(null); \n  \n  useEffect(() => {\n    fetchCSV(DATA)\n    .then( value => csvParser(value))\n    .then(convertedData => {\n      setDataBase(convertedData);\n    });\n  }, []);\n\n\n  return (\n    <ThemeProvider theme={customTheme}>\n\n      \n      \n\n      <div className={classes['app']}>\n        {dataBase && <MainApp headers={dataBase.headers} data={dataBase.parsedData}/>}\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal-wrapper\":\"ModalScreen_modal-wrapper__3ym3g\",\"container\":\"ModalScreen_container__JOZcb\"};"],"sourceRoot":""}